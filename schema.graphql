"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input BlockChangedFilter {
  number_gte: Int!
}

scalar Bytes

type Challenge {
  id: String!
  topic: Topic!
  stake: BigInt!
  createdAt: BigInt!
  maturity: BigInt!
  state: Int!
  participants(skip: Int = 0, first: Int = 100, orderBy: ParticipantChallenge_orderBy, orderDirection: OrderDirection, where: ParticipantChallenge_filter): [ParticipantChallenge!]!
  results: BigInt!
  params: String!
}

input Challenge_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  topic: String
  topic_not: String
  topic_gt: String
  topic_lt: String
  topic_gte: String
  topic_lte: String
  topic_in: [String!]
  topic_not_in: [String!]
  topic_contains: String
  topic_contains_nocase: String
  topic_not_contains: String
  topic_not_contains_nocase: String
  topic_starts_with: String
  topic_starts_with_nocase: String
  topic_not_starts_with: String
  topic_not_starts_with_nocase: String
  topic_ends_with: String
  topic_ends_with_nocase: String
  topic_not_ends_with: String
  topic_not_ends_with_nocase: String
  topic_: Topic_filter
  stake: BigInt
  stake_not: BigInt
  stake_gt: BigInt
  stake_lt: BigInt
  stake_gte: BigInt
  stake_lte: BigInt
  stake_in: [BigInt!]
  stake_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  maturity: BigInt
  maturity_not: BigInt
  maturity_gt: BigInt
  maturity_lt: BigInt
  maturity_gte: BigInt
  maturity_lte: BigInt
  maturity_in: [BigInt!]
  maturity_not_in: [BigInt!]
  state: Int
  state_not: Int
  state_gt: Int
  state_lt: Int
  state_gte: Int
  state_lte: Int
  state_in: [Int!]
  state_not_in: [Int!]
  participants_: ParticipantChallenge_filter
  results: BigInt
  results_not: BigInt
  results_gt: BigInt
  results_lt: BigInt
  results_gte: BigInt
  results_lte: BigInt
  results_in: [BigInt!]
  results_not_in: [BigInt!]
  params: String
  params_not: String
  params_gt: String
  params_lt: String
  params_gte: String
  params_lte: String
  params_in: [String!]
  params_not_in: [String!]
  params_contains: String
  params_contains_nocase: String
  params_not_contains: String
  params_not_contains_nocase: String
  params_starts_with: String
  params_starts_with_nocase: String
  params_not_starts_with: String
  params_not_starts_with_nocase: String
  params_ends_with: String
  params_ends_with_nocase: String
  params_not_ends_with: String
  params_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Challenge_filter]
  or: [Challenge_filter]
}

enum Challenge_orderBy {
  id
  topic
  topic__id
  topic__title
  topic__description
  topic__maintainer
  topic__evaluator
  topic__state
  stake
  createdAt
  maturity
  state
  participants
  results
  params
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Participant {
  id: String!
  Challenges(skip: Int = 0, first: Int = 100, orderBy: ParticipantChallenge_orderBy, orderDirection: OrderDirection, where: ParticipantChallenge_filter): [ParticipantChallenge!]!
}

input Participant_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  Challenges_: ParticipantChallenge_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Participant_filter]
  or: [Participant_filter]
}

enum Participant_orderBy {
  id
  Challenges
}

type ParticipantChallenge {
  id: String!
  participant: Participant!
  challenge: Challenge!
}

input ParticipantChallenge_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  participant: String
  participant_not: String
  participant_gt: String
  participant_lt: String
  participant_gte: String
  participant_lte: String
  participant_in: [String!]
  participant_not_in: [String!]
  participant_contains: String
  participant_contains_nocase: String
  participant_not_contains: String
  participant_not_contains_nocase: String
  participant_starts_with: String
  participant_starts_with_nocase: String
  participant_not_starts_with: String
  participant_not_starts_with_nocase: String
  participant_ends_with: String
  participant_ends_with_nocase: String
  participant_not_ends_with: String
  participant_not_ends_with_nocase: String
  participant_: Participant_filter
  challenge: String
  challenge_not: String
  challenge_gt: String
  challenge_lt: String
  challenge_gte: String
  challenge_lte: String
  challenge_in: [String!]
  challenge_not_in: [String!]
  challenge_contains: String
  challenge_contains_nocase: String
  challenge_not_contains: String
  challenge_not_contains_nocase: String
  challenge_starts_with: String
  challenge_starts_with_nocase: String
  challenge_not_starts_with: String
  challenge_not_starts_with_nocase: String
  challenge_ends_with: String
  challenge_ends_with_nocase: String
  challenge_not_ends_with: String
  challenge_not_ends_with_nocase: String
  challenge_: Challenge_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ParticipantChallenge_filter]
  or: [ParticipantChallenge_filter]
}

enum ParticipantChallenge_orderBy {
  id
  participant
  participant__id
  challenge
  challenge__id
  challenge__stake
  challenge__createdAt
  challenge__maturity
  challenge__state
  challenge__results
  challenge__params
}

type Query {
  topic(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Topic
  topics(
    skip: Int = 0
    first: Int = 100
    orderBy: Topic_orderBy
    orderDirection: OrderDirection
    where: Topic_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Topic!]!
  challenge(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Challenge
  challenges(
    skip: Int = 0
    first: Int = 100
    orderBy: Challenge_orderBy
    orderDirection: OrderDirection
    where: Challenge_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Challenge!]!
  participant(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Participant
  participants(
    skip: Int = 0
    first: Int = 100
    orderBy: Participant_orderBy
    orderDirection: OrderDirection
    where: Participant_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Participant!]!
  participantChallenge(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ParticipantChallenge
  participantChallenges(
    skip: Int = 0
    first: Int = 100
    orderBy: ParticipantChallenge_orderBy
    orderDirection: OrderDirection
    where: ParticipantChallenge_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ParticipantChallenge!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  topic(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Topic
  topics(
    skip: Int = 0
    first: Int = 100
    orderBy: Topic_orderBy
    orderDirection: OrderDirection
    where: Topic_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Topic!]!
  challenge(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Challenge
  challenges(
    skip: Int = 0
    first: Int = 100
    orderBy: Challenge_orderBy
    orderDirection: OrderDirection
    where: Challenge_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Challenge!]!
  participant(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Participant
  participants(
    skip: Int = 0
    first: Int = 100
    orderBy: Participant_orderBy
    orderDirection: OrderDirection
    where: Participant_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Participant!]!
  participantChallenge(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ParticipantChallenge
  participantChallenges(
    skip: Int = 0
    first: Int = 100
    orderBy: ParticipantChallenge_orderBy
    orderDirection: OrderDirection
    where: ParticipantChallenge_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ParticipantChallenge!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Topic {
  id: String!
  title: String!
  description: String!
  maintainer: String!
  evaluator: String!
  state: Int!
}

input Topic_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  maintainer: String
  maintainer_not: String
  maintainer_gt: String
  maintainer_lt: String
  maintainer_gte: String
  maintainer_lte: String
  maintainer_in: [String!]
  maintainer_not_in: [String!]
  maintainer_contains: String
  maintainer_contains_nocase: String
  maintainer_not_contains: String
  maintainer_not_contains_nocase: String
  maintainer_starts_with: String
  maintainer_starts_with_nocase: String
  maintainer_not_starts_with: String
  maintainer_not_starts_with_nocase: String
  maintainer_ends_with: String
  maintainer_ends_with_nocase: String
  maintainer_not_ends_with: String
  maintainer_not_ends_with_nocase: String
  evaluator: String
  evaluator_not: String
  evaluator_gt: String
  evaluator_lt: String
  evaluator_gte: String
  evaluator_lte: String
  evaluator_in: [String!]
  evaluator_not_in: [String!]
  evaluator_contains: String
  evaluator_contains_nocase: String
  evaluator_not_contains: String
  evaluator_not_contains_nocase: String
  evaluator_starts_with: String
  evaluator_starts_with_nocase: String
  evaluator_not_starts_with: String
  evaluator_not_starts_with_nocase: String
  evaluator_ends_with: String
  evaluator_ends_with_nocase: String
  evaluator_not_ends_with: String
  evaluator_not_ends_with_nocase: String
  state: Int
  state_not: Int
  state_gt: Int
  state_lt: Int
  state_gte: Int
  state_lte: Int
  state_in: [Int!]
  state_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Topic_filter]
  or: [Topic_filter]
}

enum Topic_orderBy {
  id
  title
  description
  maintainer
  evaluator
  state
}

